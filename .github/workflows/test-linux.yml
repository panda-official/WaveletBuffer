name: Compile project and run C++ tests [Linux]
on:
  push:
    branches: [main, stable, develop]
    tags:
      - 'v*'
  pull_request:
    branches: [main, stable, develop]

env:
  CONAN_USER_HOME: /home/runner/

jobs:
  cpplint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install cpplint
        run: pip3 install cpplint
      - name: Run cpplint
        run: find {benchmarks,tests,sources,wavelet_buffer,examples}/ -name "*.cc" -o -name "*.h" | xargs cpplint
  build_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [ Debug, Release ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          sudo apt-get install libopenblas-dev
          sudo apt-get install libjpeg-dev
          sudo apt-get install nlohmann-json3-dev
          git clone https://bitbucket.org/blaze-lib/blaze.git --depth=1 --branch=v3.8 && cd blaze && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/ . && sudo make install
          git clone https://github.com/USCiLab/cereal --depth=1 --branch=v1.3.2 && cd cereal && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/ -DJUST_INSTALL_CEREAL=ON . && sudo make install
          sudo apt-get install lcov
      - name: Build tests, benchmarks and examples
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DWB_BUILD_TESTS=ON -DWB_BUILD_BENCHMARKS=ON -DWB_BUILD_EXAMPLES=ON -DCODE_COVERAGE=ON ..
          cmake --build .
      - name: Run tests
        run: |
          cd build
          ctest --output-on-failure
      - name: Install wavelet_buffer
        run: |
          cd build
          sudo cmake --install .
      - name: Check cmake target installation
        run: cmake --find-package -DNAME=wavelet_buffer -DCOMPILER_ID=GNU -DLANGUAGE=CXX -DMODE=EXIST
      - name: Create code coverage report
        if: matrix.build_type == 'debug'
        run: |
          lcov --directory . --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' '*/tests/*' '*/build/*' --output-file coverage.info
          lcov --list coverage.info
      - name: Upload code coverage report to codecov.io
        if: matrix.build_type == 'debug'
        uses: codecov/codecov-action@v2
        with:
          directory: .
          fail_ci_if_error: true
          files: ./coverage.info
          flags: unittests
          verbose: true
  conan:
    needs: [ build_test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install conan
        run: pip3 install conan
      - name: Create profile
        run: |
          cd conan
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default
      - name: Build package for stable channel
        if: github.ref_type == 'tag'
        run: |
          cd conan
          CONAN_SOURCE_DIR=`pwd`/.. conan create . drift/stable
      - name: Build package for develop channel
        if: github.ref_type == 'branch'
        run: |
          cd conan
          CONAN_SOURCE_DIR=`pwd`/.. conan create . drift/develop
      - name: Upload package
        if: ${{ (github.ref == 'refs/heads/develop') || (startsWith(github.event.ref, 'refs/tags/v')) }}
        run: |
          conan remote add panda https://conan.panda.technology/artifactory/api/conan/drift
          conan user -p ${{secrets.CONAN_PASSWORD}} -r panda --skip-auth ${{secrets.CONAN_LOGIN_USERNAME}}
          conan upload wavelet_buffer --all --confirm --remote=panda
      - run: conan config home

      - name: Cache .conan directory
        uses: actions/cache@v3
        with:
          path: /home/runner/.conan
          key: conan-cache
  pip:
    name: Build with Pip
    #needs: [ conan ]
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ ubuntu-latest ]
        python-version: [ "3.8", "3.9", "3.10" ]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          sudo apt-get install libopenblas-dev
          sudo apt-get install libjpeg-dev
          sudo apt-get install nlohmann-json3-dev
          git clone https://bitbucket.org/blaze-lib/blaze.git --depth=1 --branch=v3.8 && cd blaze && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/ . && sudo make install
          git clone https://github.com/USCiLab/cereal --depth=1 --branch=v1.3.2 && cd cereal && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/ -DJUST_INSTALL_CEREAL=ON . && sudo make install

      - name: Build and install
        run: |
          cd python
          pip install --verbose .[test]

      - name: Test
        run: |
          cd python
          pytest tests

  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build SDist
        run: |
          cd python
          pipx run build --sdist

      - name: Check metadata
        run: |
          cd python
          pipx run twine check dist/*

      - uses: actions/upload-artifact@v2
        with:
          path: python/dist/*.tar.gz

  build_wheels:
    name: Wheels on ${{ matrix.os }}
    needs: [conan]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]

    steps:
      - uses: actions/checkout@v2

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.6.1

      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse python

      - name: Verify clean directory
        run: |
          cd python
          git diff --exit-code
        shell: bash

      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          path: python/wheelhouse/*.whl

  upload_all:
    name: Upload if release
    needs: [ build_wheels, build_sdist ]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/setup-python@v2

      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: ${{ secrets.PYPI_USERNAME }}
          password: ${{ secrets.PYPI_PASSWORD }}
          repository_url: https://pypi.panda.technology
